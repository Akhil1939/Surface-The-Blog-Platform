// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Surface_Entities.Context;

#nullable disable

namespace Surface_DataAccessLayer.Migrations
{
    [DbContext(typeof(SurfaceContext))]
    [Migration("20230916075713_table config refine")]
    partial class tableconfigrefine
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("LoginProviders");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 9, 16, 7, 57, 13, 260, DateTimeKind.Utc).AddTicks(2470),
                            ModifiedOn = new DateTime(2023, 9, 16, 7, 57, 13, 260, DateTimeKind.Utc).AddTicks(2471),
                            Name = "Custom",
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 9, 16, 7, 57, 13, 260, DateTimeKind.Utc).AddTicks(2474),
                            ModifiedOn = new DateTime(2023, 9, 16, 7, 57, 13, 260, DateTimeKind.Utc).AddTicks(2475),
                            Name = "Google",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusGroupId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StatusGroupId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9819),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9824),
                            Name = "Active",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9827),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9828),
                            Name = "Inactive",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9830),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9831),
                            Name = "Reported",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9834),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9835),
                            Name = "Blocked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9837),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9838),
                            Name = "Deleted",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9840),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9841),
                            Name = "Locked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9844),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9845),
                            Name = "Planning",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)8,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9847),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9848),
                            Name = "Active",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)9,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9850),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9851),
                            Name = "On Hold",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)10,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9853),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9854),
                            Name = "Completed",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)11,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9857),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9858),
                            Name = "Cancelled",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)12,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9860),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9861),
                            Name = "To Do",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)13,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9864),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9864),
                            Name = "In Progress",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)14,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9867),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9867),
                            Name = "Blocked",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)15,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9870),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9871),
                            Name = "Completed",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)16,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9873),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9874),
                            Name = "Deferred",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)17,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9876),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9877),
                            Name = "Idea",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)18,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9879),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9880),
                            Name = "Backlog",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)19,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9883),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9883),
                            Name = "In Progress",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)20,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9886),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9887),
                            Name = "Testing",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)21,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9889),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9890),
                            Name = "Released",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)22,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9892),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9893),
                            Name = "Reported",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)23,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9961),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9962),
                            Name = "In Progress",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)24,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9964),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9965),
                            Name = "Reproduced",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)25,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9968),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9968),
                            Name = "Fixed",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)26,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9971),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9972),
                            Name = "Verified",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)27,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9974),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9975),
                            Name = "Pending",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)28,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9977),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9978),
                            Name = "Reviewed",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)29,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9980),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9981),
                            Name = "In Progress",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)30,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9984),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9984),
                            Name = "Closed",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)31,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9987),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9987),
                            Name = "Active",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)32,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9990),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9991),
                            Name = "On Leave",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)33,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9993),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9994),
                            Name = "Pending",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)34,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9996),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9997),
                            Name = "Completed",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)35,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(9999),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 260, DateTimeKind.Local),
                            Name = "Resigned/Left",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)36,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 260, DateTimeKind.Local).AddTicks(3),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 260, DateTimeKind.Local).AddTicks(4),
                            Name = "Suspended",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)37,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 260, DateTimeKind.Local).AddTicks(6),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 260, DateTimeKind.Local).AddTicks(7),
                            Name = "Not Assigned",
                            StatusGroupId = (byte)7
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.StatusGroup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusGroups");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6455),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6469),
                            Name = "User"
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6473),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6474),
                            Name = "Project"
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6476),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6477),
                            Name = "Task"
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6479),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6480),
                            Name = "Feature"
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6482),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6483),
                            Name = "Bug"
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6486),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6486),
                            Name = "Customer Story"
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6488),
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 259, DateTimeKind.Local).AddTicks(6489),
                            Name = "TeamMember"
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockedOutEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("LoginProviderId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginProviderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = (byte)0,
                            Avatar = "",
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 263, DateTimeKind.Local).AddTicks(3896),
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            LoginProviderId = (byte)1,
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 263, DateTimeKind.Local).AddTicks(3910),
                            Password = "5652DDF6EA419A920A948A4BBA99A1B48B434D1237218FCF8D2DA2DA41E7C0F4046BC10C12ABDA86D09022B2AD1D6F566F82F3DF72CDFAEE40AB154537DFB8FD",
                            Salt = "+QA9bkBDYMlaPDTRzIYMoPeMDd9oa9k/Ay4Lg==",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.UserRole", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6081),
                            ModifiedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6082),
                            Name = "ProjectManager"
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6085),
                            ModifiedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6086),
                            Name = "ProjectMember"
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6088),
                            ModifiedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6089),
                            Name = "ProjectViewer"
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6091),
                            ModifiedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6091),
                            Name = "ProjectAdmin"
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6093),
                            ModifiedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6094),
                            Name = "TeamLeader"
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6096),
                            ModifiedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6097),
                            Name = "Developer"
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6099),
                            ModifiedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6100),
                            Name = "QAEngineer"
                        },
                        new
                        {
                            Id = (byte)8,
                            CreatedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6102),
                            ModifiedOn = new DateTime(2023, 9, 16, 7, 57, 13, 263, DateTimeKind.Utc).AddTicks(6102),
                            Name = "BusinessAnalyst"
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.CustomerStory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("CustomerStories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 268, DateTimeKind.Local).AddTicks(6739),
                            Index = 1,
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 268, DateTimeKind.Local).AddTicks(6754),
                            Name = "Surface Story 1",
                            ProjectId = 1L,
                            StatusId = (byte)26,
                            Story = "<h1>Story:</h1>\r\n<p>As a project manager or team member, I want the ability to customize my user profile to provide more context about myself and my role within the organization. This customization will enhance collaboration within the project management system.</p>\r\n\r\n<h2>Acceptance Criteria:</h2>\r\n\r\n<ol>\r\n    <li>\r\n        <h3>Profile Photo:</h3>\r\n        <ul>\r\n            <li>I can upload a profile photo to personalize my user account.</li>\r\n            <li>The profile photo should be displayed next to my name throughout the application.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Personal Information:</h3>\r\n        <ul>\r\n            <li>I can edit my name, job title, and contact information in my profile.</li>\r\n            <li>Changes to my personal information should be reflected in the user interface.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Bio and Description:</h3>\r\n        <ul>\r\n            <li>I can write a brief bio or description about myself, highlighting my skills, responsibilities, or any relevant information.</li>\r\n            <li>The bio/description should be displayed on my profile page and in project team member lists.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Time Zone Setting:</h3>\r\n        <ul>\r\n            <li>I can set my preferred time zone to ensure that all project-related dates and times are displayed correctly for my location.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Privacy Settings:</h3>\r\n        <ul>\r\n            <li>I can choose who can view my profile information:</li>\r\n            <ul>\r\n                <li>[ ] Only me</li>\r\n                <li>[ ] My team members</li>\r\n                <li>[ ] Everyone in the organization</li>\r\n            </ul>\r\n            <li>Profile information should be visible only to those I've granted access to.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Save Changes:</h3>\r\n        <ul>\r\n            <li>After making any updates to my profile, I can save the changes, and they should persist across sessions.</li>\r\n        </ul>\r\n    </li>\r\n</ol>\r\n\r\n<h2>Definition of Done:</h2>\r\n<ul>\r\n    <li>The user profile customization feature has been thoroughly tested and is free of bugs.</li>\r\n    <li>The changes made to the user profile are stored securely and persist in the database.</li>\r\n    <li>User data privacy and access controls are enforced according to the selected privacy settings.</li>\r\n    <li>The user interface provides clear and user-friendly options for customizing the profile.</li>\r\n    <li>Documentation and user guides have been updated to explain how to use the new profile customization feature.</li>\r\n</ul>"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 268, DateTimeKind.Local).AddTicks(6759),
                            Index = 2,
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 268, DateTimeKind.Local).AddTicks(6760),
                            Name = "Surface Story 1",
                            ProjectId = 1L,
                            StatusId = (byte)26,
                            Story = "<h1>Story:</h1>\r\n<p>As a project manager or team member, I want the ability to customize my user profile to provide more context about myself and my role within the organization. This customization will enhance collaboration within the project management system.</p>\r\n\r\n<h2>Acceptance Criteria:</h2>\r\n\r\n<ol>\r\n    <li>\r\n        <h3>Profile Photo:</h3>\r\n        <ul>\r\n            <li>I can upload a profile photo to personalize my user account.</li>\r\n            <li>The profile photo should be displayed next to my name throughout the application.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Personal Information:</h3>\r\n        <ul>\r\n            <li>I can edit my name, job title, and contact information in my profile.</li>\r\n            <li>Changes to my personal information should be reflected in the user interface.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Bio and Description:</h3>\r\n        <ul>\r\n            <li>I can write a brief bio or description about myself, highlighting my skills, responsibilities, or any relevant information.</li>\r\n            <li>The bio/description should be displayed on my profile page and in project team member lists.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Time Zone Setting:</h3>\r\n        <ul>\r\n            <li>I can set my preferred time zone to ensure that all project-related dates and times are displayed correctly for my location.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Privacy Settings:</h3>\r\n        <ul>\r\n            <li>I can choose who can view my profile information:</li>\r\n            <ul>\r\n                <li>[ ] Only me</li>\r\n                <li>[ ] My team members</li>\r\n                <li>[ ] Everyone in the organization</li>\r\n            </ul>\r\n            <li>Profile information should be visible only to those I've granted access to.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Save Changes:</h3>\r\n        <ul>\r\n            <li>After making any updates to my profile, I can save the changes, and they should persist across sessions.</li>\r\n        </ul>\r\n    </li>\r\n</ol>\r\n\r\n<h2>Definition of Done:</h2>\r\n<ul>\r\n    <li>The user profile customization feature has been thoroughly tested and is free of bugs.</li>\r\n    <li>The changes made to the user profile are stored securely and persist in the database.</li>\r\n    <li>User data privacy and access controls are enforced according to the selected privacy settings.</li>\r\n    <li>The user interface provides clear and user-friendly options for customizing the profile.</li>\r\n    <li>Documentation and user guides have been updated to explain how to use the new profile customization feature.</li>\r\n</ul>"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 268, DateTimeKind.Local).AddTicks(6764),
                            Index = 3,
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 268, DateTimeKind.Local).AddTicks(6765),
                            Name = "Surface Story 1",
                            ProjectId = 1L,
                            StatusId = (byte)26,
                            Story = "<h1>Story:</h1>\r\n<p>As a project manager or team member, I want the ability to customize my user profile to provide more context about myself and my role within the organization. This customization will enhance collaboration within the project management system.</p>\r\n\r\n<h2>Acceptance Criteria:</h2>\r\n\r\n<ol>\r\n    <li>\r\n        <h3>Profile Photo:</h3>\r\n        <ul>\r\n            <li>I can upload a profile photo to personalize my user account.</li>\r\n            <li>The profile photo should be displayed next to my name throughout the application.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Personal Information:</h3>\r\n        <ul>\r\n            <li>I can edit my name, job title, and contact information in my profile.</li>\r\n            <li>Changes to my personal information should be reflected in the user interface.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Bio and Description:</h3>\r\n        <ul>\r\n            <li>I can write a brief bio or description about myself, highlighting my skills, responsibilities, or any relevant information.</li>\r\n            <li>The bio/description should be displayed on my profile page and in project team member lists.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Time Zone Setting:</h3>\r\n        <ul>\r\n            <li>I can set my preferred time zone to ensure that all project-related dates and times are displayed correctly for my location.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Privacy Settings:</h3>\r\n        <ul>\r\n            <li>I can choose who can view my profile information:</li>\r\n            <ul>\r\n                <li>[ ] Only me</li>\r\n                <li>[ ] My team members</li>\r\n                <li>[ ] Everyone in the organization</li>\r\n            </ul>\r\n            <li>Profile information should be visible only to those I've granted access to.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Save Changes:</h3>\r\n        <ul>\r\n            <li>After making any updates to my profile, I can save the changes, and they should persist across sessions.</li>\r\n        </ul>\r\n    </li>\r\n</ol>\r\n\r\n<h2>Definition of Done:</h2>\r\n<ul>\r\n    <li>The user profile customization feature has been thoroughly tested and is free of bugs.</li>\r\n    <li>The changes made to the user profile are stored securely and persist in the database.</li>\r\n    <li>User data privacy and access controls are enforced according to the selected privacy settings.</li>\r\n    <li>The user interface provides clear and user-friendly options for customizing the profile.</li>\r\n    <li>Documentation and user guides have been updated to explain how to use the new profile customization feature.</li>\r\n</ul>"
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActualStartDate = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3272),
                            Budget = 5000.0,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3286),
                            Description = "This is a demo project that all users are in this project",
                            EndDate = new DateTime(2024, 2, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3276),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3288),
                            Name = "Surface",
                            StartDate = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3264),
                            StatusId = (byte)8
                        },
                        new
                        {
                            Id = 2L,
                            ActualStartDate = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3293),
                            Budget = 10000.0,
                            CreatedBy = 4L,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3298),
                            Description = "A new development project",
                            EndDate = new DateTime(2023, 12, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3294),
                            ModifiedBy = 4L,
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3299),
                            Name = "Project A",
                            RepoLink = "https://github.com/projecta",
                            StartDate = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3292),
                            StatusId = (byte)8
                        },
                        new
                        {
                            Id = 3L,
                            ActualStartDate = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3303),
                            Budget = 7500.0,
                            CreatedBy = 3L,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3306),
                            Description = "Another project for testing",
                            EndDate = new DateTime(2023, 11, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3304),
                            ModifiedBy = 3L,
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3307),
                            Name = "Project B",
                            RepoLink = "https://github.com/projectb",
                            StartDate = new DateTime(2023, 9, 16, 13, 27, 13, 265, DateTimeKind.Local).AddTicks(3302),
                            StatusId = (byte)8
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 270, DateTimeKind.Local).AddTicks(1362),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 270, DateTimeKind.Local).AddTicks(1368),
                            Name = "Design",
                            ProjectId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 2L,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 270, DateTimeKind.Local).AddTicks(1372),
                            ModifiedBy = 2L,
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 270, DateTimeKind.Local).AddTicks(1373),
                            Name = "Development",
                            ProjectId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 3L,
                            CreatedOn = new DateTime(2023, 9, 16, 13, 27, 13, 270, DateTimeKind.Local).AddTicks(1376),
                            ModifiedBy = 3L,
                            ModifiedOn = new DateTime(2023, 9, 16, 13, 27, 13, 270, DateTimeKind.Local).AddTicks(1377),
                            Name = "Testing",
                            ProjectId = 1L
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("UserRoleId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.StatusGroup", "StatusGroup")
                        .WithMany("Statuses")
                        .HasForeignKey("StatusGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StatusGroup");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.LoginProvider", "LoginProvider")
                        .WithMany()
                        .HasForeignKey("LoginProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LoginProvider");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface_Entities.Entities.CustomerStory", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Project", "Project")
                        .WithMany("CustomerStories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Statuses")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Project", "Projects")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Surface_Entities.Entities.TeamMember", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Team", "Teams")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "Users")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.StatusGroup", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.Navigation("CustomerStories");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
