// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Surface_Entities.Context;

#nullable disable

namespace Surface_DataAccessLayer.Migrations
{
    [DbContext(typeof(SurfaceContext))]
    [Migration("20230904115651_Customer Story 2")]
    partial class CustomerStory2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("LoginProviders");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 9, 4, 11, 56, 51, 440, DateTimeKind.Utc).AddTicks(2145),
                            ModifiedOn = new DateTime(2023, 9, 4, 11, 56, 51, 440, DateTimeKind.Utc).AddTicks(2146),
                            Name = "Custom",
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 9, 4, 11, 56, 51, 440, DateTimeKind.Utc).AddTicks(2151),
                            ModifiedOn = new DateTime(2023, 9, 4, 11, 56, 51, 440, DateTimeKind.Utc).AddTicks(2151),
                            Name = "Google",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusGroupId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StatusGroupId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7687),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7697),
                            Name = "Active",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7700),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7701),
                            Name = "Inactive",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7703),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7704),
                            Name = "Reported",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7707),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7708),
                            Name = "Blocked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7710),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7711),
                            Name = "Deleted",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7714),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7714),
                            Name = "Locked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7717),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7718),
                            Name = "Planning",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)8,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7720),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7721),
                            Name = "Active",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)9,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7724),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7724),
                            Name = "On Hold",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)10,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7727),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7728),
                            Name = "Completed",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)11,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7730),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7731),
                            Name = "Cancelled",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)12,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7733),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7734),
                            Name = "To Do",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)13,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7737),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7738),
                            Name = "In Progress",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)14,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7740),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7741),
                            Name = "Blocked",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)15,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7743),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7744),
                            Name = "Completed",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)16,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7746),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7747),
                            Name = "Deferred",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)17,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7750),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7750),
                            Name = "Idea",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)18,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7753),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7753),
                            Name = "Backlog",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)19,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7756),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7757),
                            Name = "In Progress",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)20,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7759),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7760),
                            Name = "Testing",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)21,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7762),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7763),
                            Name = "Released",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)22,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7765),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7766),
                            Name = "Reported",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)23,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7768),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7769),
                            Name = "In Progress",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)24,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7772),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7773),
                            Name = "Reproduced",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)25,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7775),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7776),
                            Name = "Fixed",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)26,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7778),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7779),
                            Name = "Verified",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)27,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7781),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7782),
                            Name = "Pending",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)28,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7784),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7785),
                            Name = "Reviewed",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)29,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7787),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7788),
                            Name = "In Progress",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)30,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7791),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(7792),
                            Name = "Closed",
                            StatusGroupId = (byte)6
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.StatusGroup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusGroups");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3483),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3504),
                            Name = "User"
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3510),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3511),
                            Name = "Project"
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3514),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3515),
                            Name = "Task"
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3519),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3520),
                            Name = "Feature"
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3523),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3524),
                            Name = "Bug"
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3527),
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 439, DateTimeKind.Local).AddTicks(3529),
                            Name = "Customer Story"
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockedOutEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("LoginProviderId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginProviderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = (byte)0,
                            Avatar = "",
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 444, DateTimeKind.Local).AddTicks(1439),
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            LoginProviderId = (byte)1,
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 444, DateTimeKind.Local).AddTicks(1454),
                            Password = "5652DDF6EA419A920A948A4BBA99A1B48B434D1237218FCF8D2DA2DA41E7C0F4046BC10C12ABDA86D09022B2AD1D6F566F82F3DF72CDFAEE40AB154537DFB8FD",
                            Salt = "+QA9bkBDYMlaPDTRzIYMoPeMDd9oa9k/Ay4Lg==",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.UserRole", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4751),
                            ModifiedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4752),
                            Name = "ProjectManager"
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4760),
                            ModifiedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4761),
                            Name = "ProjectMember"
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4764),
                            ModifiedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4765),
                            Name = "ProjectViewer"
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4768),
                            ModifiedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4769),
                            Name = "ProjectAdmin"
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4772),
                            ModifiedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4773),
                            Name = "TeamLeader"
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4776),
                            ModifiedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4776),
                            Name = "Developer"
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4780),
                            ModifiedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4780),
                            Name = "QAEngineer"
                        },
                        new
                        {
                            Id = (byte)8,
                            CreatedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4784),
                            ModifiedOn = new DateTime(2023, 9, 4, 11, 56, 51, 444, DateTimeKind.Utc).AddTicks(4784),
                            Name = "BusinessAnalyst"
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.CustomerStory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.ToTable("CustomerStories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 449, DateTimeKind.Local).AddTicks(6262),
                            Index = 1,
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 449, DateTimeKind.Local).AddTicks(6277),
                            Name = "Surface Story 1",
                            ProjectId = 1L,
                            StatusId = (byte)26,
                            Story = "<h1>Story:</h1>\r\n<p>As a project manager or team member, I want the ability to customize my user profile to provide more context about myself and my role within the organization. This customization will enhance collaboration within the project management system.</p>\r\n\r\n<h2>Acceptance Criteria:</h2>\r\n\r\n<ol>\r\n    <li>\r\n        <h3>Profile Photo:</h3>\r\n        <ul>\r\n            <li>I can upload a profile photo to personalize my user account.</li>\r\n            <li>The profile photo should be displayed next to my name throughout the application.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Personal Information:</h3>\r\n        <ul>\r\n            <li>I can edit my name, job title, and contact information in my profile.</li>\r\n            <li>Changes to my personal information should be reflected in the user interface.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Bio and Description:</h3>\r\n        <ul>\r\n            <li>I can write a brief bio or description about myself, highlighting my skills, responsibilities, or any relevant information.</li>\r\n            <li>The bio/description should be displayed on my profile page and in project team member lists.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Time Zone Setting:</h3>\r\n        <ul>\r\n            <li>I can set my preferred time zone to ensure that all project-related dates and times are displayed correctly for my location.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Privacy Settings:</h3>\r\n        <ul>\r\n            <li>I can choose who can view my profile information:</li>\r\n            <ul>\r\n                <li>[ ] Only me</li>\r\n                <li>[ ] My team members</li>\r\n                <li>[ ] Everyone in the organization</li>\r\n            </ul>\r\n            <li>Profile information should be visible only to those I've granted access to.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Save Changes:</h3>\r\n        <ul>\r\n            <li>After making any updates to my profile, I can save the changes, and they should persist across sessions.</li>\r\n        </ul>\r\n    </li>\r\n</ol>\r\n\r\n<h2>Definition of Done:</h2>\r\n<ul>\r\n    <li>The user profile customization feature has been thoroughly tested and is free of bugs.</li>\r\n    <li>The changes made to the user profile are stored securely and persist in the database.</li>\r\n    <li>User data privacy and access controls are enforced according to the selected privacy settings.</li>\r\n    <li>The user interface provides clear and user-friendly options for customizing the profile.</li>\r\n    <li>Documentation and user guides have been updated to explain how to use the new profile customization feature.</li>\r\n</ul>"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 449, DateTimeKind.Local).AddTicks(6283),
                            Index = 2,
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 449, DateTimeKind.Local).AddTicks(6284),
                            Name = "Surface Story 1",
                            ProjectId = 1L,
                            StatusId = (byte)26,
                            Story = "<h1>Story:</h1>\r\n<p>As a project manager or team member, I want the ability to customize my user profile to provide more context about myself and my role within the organization. This customization will enhance collaboration within the project management system.</p>\r\n\r\n<h2>Acceptance Criteria:</h2>\r\n\r\n<ol>\r\n    <li>\r\n        <h3>Profile Photo:</h3>\r\n        <ul>\r\n            <li>I can upload a profile photo to personalize my user account.</li>\r\n            <li>The profile photo should be displayed next to my name throughout the application.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Personal Information:</h3>\r\n        <ul>\r\n            <li>I can edit my name, job title, and contact information in my profile.</li>\r\n            <li>Changes to my personal information should be reflected in the user interface.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Bio and Description:</h3>\r\n        <ul>\r\n            <li>I can write a brief bio or description about myself, highlighting my skills, responsibilities, or any relevant information.</li>\r\n            <li>The bio/description should be displayed on my profile page and in project team member lists.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Time Zone Setting:</h3>\r\n        <ul>\r\n            <li>I can set my preferred time zone to ensure that all project-related dates and times are displayed correctly for my location.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Privacy Settings:</h3>\r\n        <ul>\r\n            <li>I can choose who can view my profile information:</li>\r\n            <ul>\r\n                <li>[ ] Only me</li>\r\n                <li>[ ] My team members</li>\r\n                <li>[ ] Everyone in the organization</li>\r\n            </ul>\r\n            <li>Profile information should be visible only to those I've granted access to.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Save Changes:</h3>\r\n        <ul>\r\n            <li>After making any updates to my profile, I can save the changes, and they should persist across sessions.</li>\r\n        </ul>\r\n    </li>\r\n</ol>\r\n\r\n<h2>Definition of Done:</h2>\r\n<ul>\r\n    <li>The user profile customization feature has been thoroughly tested and is free of bugs.</li>\r\n    <li>The changes made to the user profile are stored securely and persist in the database.</li>\r\n    <li>User data privacy and access controls are enforced according to the selected privacy settings.</li>\r\n    <li>The user interface provides clear and user-friendly options for customizing the profile.</li>\r\n    <li>Documentation and user guides have been updated to explain how to use the new profile customization feature.</li>\r\n</ul>"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 449, DateTimeKind.Local).AddTicks(6289),
                            Index = 3,
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 449, DateTimeKind.Local).AddTicks(6290),
                            Name = "Surface Story 1",
                            ProjectId = 1L,
                            StatusId = (byte)26,
                            Story = "<h1>Story:</h1>\r\n<p>As a project manager or team member, I want the ability to customize my user profile to provide more context about myself and my role within the organization. This customization will enhance collaboration within the project management system.</p>\r\n\r\n<h2>Acceptance Criteria:</h2>\r\n\r\n<ol>\r\n    <li>\r\n        <h3>Profile Photo:</h3>\r\n        <ul>\r\n            <li>I can upload a profile photo to personalize my user account.</li>\r\n            <li>The profile photo should be displayed next to my name throughout the application.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Personal Information:</h3>\r\n        <ul>\r\n            <li>I can edit my name, job title, and contact information in my profile.</li>\r\n            <li>Changes to my personal information should be reflected in the user interface.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Bio and Description:</h3>\r\n        <ul>\r\n            <li>I can write a brief bio or description about myself, highlighting my skills, responsibilities, or any relevant information.</li>\r\n            <li>The bio/description should be displayed on my profile page and in project team member lists.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Time Zone Setting:</h3>\r\n        <ul>\r\n            <li>I can set my preferred time zone to ensure that all project-related dates and times are displayed correctly for my location.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Privacy Settings:</h3>\r\n        <ul>\r\n            <li>I can choose who can view my profile information:</li>\r\n            <ul>\r\n                <li>[ ] Only me</li>\r\n                <li>[ ] My team members</li>\r\n                <li>[ ] Everyone in the organization</li>\r\n            </ul>\r\n            <li>Profile information should be visible only to those I've granted access to.</li>\r\n        </ul>\r\n    </li>\r\n    \r\n    <li>\r\n        <h3>Save Changes:</h3>\r\n        <ul>\r\n            <li>After making any updates to my profile, I can save the changes, and they should persist across sessions.</li>\r\n        </ul>\r\n    </li>\r\n</ol>\r\n\r\n<h2>Definition of Done:</h2>\r\n<ul>\r\n    <li>The user profile customization feature has been thoroughly tested and is free of bugs.</li>\r\n    <li>The changes made to the user profile are stored securely and persist in the database.</li>\r\n    <li>User data privacy and access controls are enforced according to the selected privacy settings.</li>\r\n    <li>The user interface provides clear and user-friendly options for customizing the profile.</li>\r\n    <li>Documentation and user guides have been updated to explain how to use the new profile customization feature.</li>\r\n</ul>"
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActualStartDate = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1441),
                            Budget = 5000.0,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1460),
                            Description = "This is a demo project that all users are in this project",
                            EndDate = new DateTime(2024, 2, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1449),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1463),
                            Name = "Surface",
                            StartDate = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1425),
                            StatusId = (byte)8
                        },
                        new
                        {
                            Id = 2L,
                            ActualStartDate = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1470),
                            Budget = 10000.0,
                            CreatedBy = 4L,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1475),
                            Description = "A new development project",
                            EndDate = new DateTime(2023, 12, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1472),
                            ModifiedBy = 4L,
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1477),
                            Name = "Project A",
                            RepoLink = "https://github.com/projecta",
                            StartDate = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1469),
                            StatusId = (byte)8
                        },
                        new
                        {
                            Id = 3L,
                            ActualStartDate = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1482),
                            Budget = 7500.0,
                            CreatedBy = 3L,
                            CreatedOn = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1486),
                            Description = "Another project for testing",
                            EndDate = new DateTime(2023, 11, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1483),
                            ModifiedBy = 3L,
                            ModifiedOn = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1487),
                            Name = "Project B",
                            RepoLink = "https://github.com/projectb",
                            StartDate = new DateTime(2023, 9, 4, 17, 26, 51, 447, DateTimeKind.Local).AddTicks(1480),
                            StatusId = (byte)8
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.StatusGroup", "StatusGroup")
                        .WithMany()
                        .HasForeignKey("StatusGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StatusGroup");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.LoginProvider", "LoginProvider")
                        .WithMany()
                        .HasForeignKey("LoginProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LoginProvider");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface_Entities.Entities.CustomerStory", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Statuses")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Statuses");
                });
#pragma warning restore 612, 618
        }
    }
}
