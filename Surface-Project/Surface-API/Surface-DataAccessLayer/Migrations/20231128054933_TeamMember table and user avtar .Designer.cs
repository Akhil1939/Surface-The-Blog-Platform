// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Surface_Entities.Context;

#nullable disable

namespace Surface_DataAccessLayer.Migrations
{
    [DbContext(typeof(SurfaceContext))]
    [Migration("20231128054933_TeamMember table and user avtar ")]
    partial class TeamMembertableanduseravtar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("LoginProviders");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 28, 5, 49, 32, 834, DateTimeKind.Utc).AddTicks(2203),
                            ModifiedOn = new DateTime(2023, 11, 28, 5, 49, 32, 834, DateTimeKind.Utc).AddTicks(2204),
                            Name = "Custom",
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 28, 5, 49, 32, 834, DateTimeKind.Utc).AddTicks(2207),
                            ModifiedOn = new DateTime(2023, 11, 28, 5, 49, 32, 834, DateTimeKind.Utc).AddTicks(2207),
                            Name = "Google",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusGroupId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StatusGroupId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9926),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9929),
                            Name = "Active",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9931),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9932),
                            Name = "Inactive",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9933),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9934),
                            Name = "Reported",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9936),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9936),
                            Name = "Blocked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9938),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9938),
                            Name = "Deleted",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9940),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9940),
                            Name = "Locked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9982),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9983),
                            Name = "Planning",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)8,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9985),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9986),
                            Name = "Active",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)9,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9987),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9988),
                            Name = "On Hold",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)10,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9989),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9990),
                            Name = "Completed",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)11,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9991),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9992),
                            Name = "Cancelled",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)12,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9994),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9994),
                            Name = "To Do",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)13,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9996),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9996),
                            Name = "In Progress",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)14,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9998),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(9998),
                            Name = "Blocked",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)15,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(1),
                            Name = "Completed",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)16,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(2),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(3),
                            Name = "Deferred",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)17,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(4),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(5),
                            Name = "Idea",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)18,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(6),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(7),
                            Name = "Backlog",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)19,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(8),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(9),
                            Name = "In Progress",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)20,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(10),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(11),
                            Name = "Testing",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)21,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(13),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(13),
                            Name = "Released",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)22,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(15),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(15),
                            Name = "Reported",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)23,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(17),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(17),
                            Name = "In Progress",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)24,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(19),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(19),
                            Name = "Reproduced",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)25,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(21),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(22),
                            Name = "Fixed",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)26,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(23),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(24),
                            Name = "Verified",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)27,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(25),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(26),
                            Name = "Pending",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)28,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(27),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(28),
                            Name = "Reviewed",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)29,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(29),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(30),
                            Name = "In Progress",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)30,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(31),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(32),
                            Name = "Closed",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)31,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(34),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(34),
                            Name = "Active",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)32,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(36),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(36),
                            Name = "On Leave",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)33,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(38),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(39),
                            Name = "Pending",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)34,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(40),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(41),
                            Name = "Completed",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)35,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(42),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(43),
                            Name = "Resigned/Left",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)36,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(45),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(45),
                            Name = "Suspended",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)37,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(47),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 834, DateTimeKind.Local).AddTicks(47),
                            Name = "Not Assigned",
                            StatusGroupId = (byte)7
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.StatusGroup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusGroups");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7742),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7753),
                            Name = "User"
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7755),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7756),
                            Name = "Project"
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7758),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7758),
                            Name = "Task"
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7760),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7760),
                            Name = "Feature"
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7762),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7762),
                            Name = "Bug"
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7764),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7764),
                            Name = "Customer Story"
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7766),
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 833, DateTimeKind.Local).AddTicks(7766),
                            Name = "TeamMember"
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockedOutEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("LoginProviderId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginProviderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = (byte)0,
                            Avatar = "",
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 836, DateTimeKind.Local).AddTicks(862),
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            LoginProviderId = (byte)1,
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 836, DateTimeKind.Local).AddTicks(871),
                            Password = "5652DDF6EA419A920A948A4BBA99A1B48B434D1237218FCF8D2DA2DA41E7C0F4046BC10C12ABDA86D09022B2AD1D6F566F82F3DF72CDFAEE40AB154537DFB8FD",
                            Salt = "+QA9bkBDYMlaPDTRzIYMoPeMDd9oa9k/Ay4Lg==",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.UserRole", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2155),
                            ModifiedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2155),
                            Name = "ProjectManager"
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2157),
                            ModifiedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2158),
                            Name = "ProjectMember"
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2159),
                            ModifiedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2160),
                            Name = "ProjectViewer"
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2161),
                            ModifiedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2162),
                            Name = "ProjectAdmin"
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2163),
                            ModifiedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2163),
                            Name = "TeamLeader"
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2165),
                            ModifiedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2165),
                            Name = "Developer"
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2167),
                            ModifiedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2167),
                            Name = "QAEngineer"
                        },
                        new
                        {
                            Id = (byte)8,
                            CreatedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2169),
                            ModifiedOn = new DateTime(2023, 11, 28, 5, 49, 32, 836, DateTimeKind.Utc).AddTicks(2169),
                            Name = "BusinessAnalyst"
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.CustomerStory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("CustomerStories");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActualStartDate = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5928),
                            Budget = 5000.0,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5938),
                            Description = "This is a demo project that all users are in this project",
                            EndDate = new DateTime(2024, 4, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5931),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5940),
                            Name = "Surface",
                            StartDate = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5923),
                            StatusId = (byte)8
                        },
                        new
                        {
                            Id = 2L,
                            ActualStartDate = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5943),
                            Budget = 10000.0,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5945),
                            Description = "A new development project",
                            EndDate = new DateTime(2024, 2, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5944),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5946),
                            Name = "Project A",
                            RepoLink = "https://github.com/projecta",
                            StartDate = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5943),
                            StatusId = (byte)8
                        },
                        new
                        {
                            Id = 3L,
                            ActualStartDate = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5949),
                            Budget = 7500.0,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5950),
                            Description = "Another project for testing",
                            EndDate = new DateTime(2024, 1, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5949),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5951),
                            Name = "Project B",
                            RepoLink = "https://github.com/projectb",
                            StartDate = new DateTime(2023, 11, 28, 11, 19, 32, 837, DateTimeKind.Local).AddTicks(5948),
                            StatusId = (byte)8
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 840, DateTimeKind.Local).AddTicks(1212),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 840, DateTimeKind.Local).AddTicks(1219),
                            Name = "Design",
                            ProjectId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 840, DateTimeKind.Local).AddTicks(1222),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 840, DateTimeKind.Local).AddTicks(1223),
                            Name = "Development",
                            ProjectId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 28, 11, 19, 32, 840, DateTimeKind.Local).AddTicks(1225),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 28, 11, 19, 32, 840, DateTimeKind.Local).AddTicks(1226),
                            Name = "Testing",
                            ProjectId = 1L
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("UserRoleId")
                        .HasColumnType("tinyint");

                    b.Property<string>("VerificationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.StatusGroup", "StatusGroup")
                        .WithMany("Statuses")
                        .HasForeignKey("StatusGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StatusGroup");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.LoginProvider", "LoginProvider")
                        .WithMany()
                        .HasForeignKey("LoginProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LoginProvider");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface_Entities.Entities.CustomerStory", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Project", "Project")
                        .WithMany("CustomerStories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Statuses")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Project", "Projects")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Surface_Entities.Entities.TeamMember", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Team", "Teams")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "Users")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.StatusGroup", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.Navigation("CustomerStories");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
