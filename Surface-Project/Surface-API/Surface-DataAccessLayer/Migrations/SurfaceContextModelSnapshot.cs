// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Surface_Entities.Context;

#nullable disable

namespace Surface_DataAccessLayer.Migrations
{
    [DbContext(typeof(SurfaceContext))]
    partial class SurfaceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("LoginProviders");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 8, 25, 10, 32, 9, 965, DateTimeKind.Utc).AddTicks(9406),
                            ModifiedOn = new DateTime(2023, 8, 25, 10, 32, 9, 965, DateTimeKind.Utc).AddTicks(9407),
                            Name = "Custom",
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 8, 25, 10, 32, 9, 965, DateTimeKind.Utc).AddTicks(9408),
                            ModifiedOn = new DateTime(2023, 8, 25, 10, 32, 9, 965, DateTimeKind.Utc).AddTicks(9409),
                            Name = "Google",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusGroupId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StatusGroupId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8030),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8033),
                            Name = "Active",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8035),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8036),
                            Name = "Inactive",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8037),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8037),
                            Name = "Reported",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8039),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8039),
                            Name = "Blocked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8041),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8041),
                            Name = "Deleted",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8043),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8043),
                            Name = "Locked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8045),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8045),
                            Name = "Planning",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)8,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8046),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8047),
                            Name = "Active",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)9,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8048),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8049),
                            Name = "On Hold",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)10,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8050),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8051),
                            Name = "Completed",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)11,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8052),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8053),
                            Name = "Cancelled",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)12,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8054),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8055),
                            Name = "To Do",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)13,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8056),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8057),
                            Name = "In Progress",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)14,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8058),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8058),
                            Name = "Blocked",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)15,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8060),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8061),
                            Name = "Completed",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)16,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8062),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8063),
                            Name = "Deferred",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)17,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8064),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8065),
                            Name = "Idea",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)18,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8066),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8067),
                            Name = "Backlog",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)19,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8068),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8069),
                            Name = "In Progress",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)20,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8070),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8071),
                            Name = "Testing",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)21,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8072),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8072),
                            Name = "Released",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)22,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8074),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8074),
                            Name = "Reported",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)23,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8076),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8076),
                            Name = "In Progress",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)24,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8078),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8078),
                            Name = "Reproduced",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)25,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8080),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8080),
                            Name = "Fixed",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)26,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8081),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(8082),
                            Name = "Verified",
                            StatusGroupId = (byte)5
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.StatusGroup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusGroups");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(6388),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(6398),
                            Name = "User"
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(6400),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(6401),
                            Name = "Project"
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(6402),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(6403),
                            Name = "Task"
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(6404),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(6405),
                            Name = "Feature"
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(6406),
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 965, DateTimeKind.Local).AddTicks(6407),
                            Name = "Bug"
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LockedOutEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("LoginProviderId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<bool>("MustChangePassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginProviderId");

                    b.HasIndex("StatusId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = (byte)0,
                            Avatar = "",
                            CreatedOn = new DateTime(2023, 8, 25, 16, 2, 9, 968, DateTimeKind.Local).AddTicks(5101),
                            Email = "admin@gmail.com",
                            LoginProviderId = (byte)1,
                            ModifiedOn = new DateTime(2023, 8, 25, 16, 2, 9, 968, DateTimeKind.Local).AddTicks(5108),
                            MustChangePassword = false,
                            Password = "5652DDF6EA419A920A948A4BBA99A1B48B434D1237218FCF8D2DA2DA41E7C0F4046BC10C12ABDA86D09022B2AD1D6F566F82F3DF72CDFAEE40AB154537DFB8FD",
                            Salt = "+QA9bkBDYMlaPDTRzIYMoPeMDd9oa9k/Ay4Lg==",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.StatusGroup", "StatusGroup")
                        .WithMany()
                        .HasForeignKey("StatusGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StatusGroup");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.LoginProvider", "LoginProvider")
                        .WithMany()
                        .HasForeignKey("LoginProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LoginProvider");

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
