// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Surface_Entities.Context;

#nullable disable

namespace Surface_DataAccessLayer.Migrations
{
    [DbContext(typeof(SurfaceContext))]
    [Migration("20231127041337_project ,team, team memeber, delete behaviour added")]
    partial class projectteamteammemeberdeletebehaviouradded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("LoginProviders");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 27, 4, 13, 37, 623, DateTimeKind.Utc).AddTicks(5098),
                            ModifiedOn = new DateTime(2023, 11, 27, 4, 13, 37, 623, DateTimeKind.Utc).AddTicks(5099),
                            Name = "Custom",
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 27, 4, 13, 37, 623, DateTimeKind.Utc).AddTicks(5101),
                            ModifiedOn = new DateTime(2023, 11, 27, 4, 13, 37, 623, DateTimeKind.Utc).AddTicks(5101),
                            Name = "Google",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusGroupId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StatusGroupId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3087),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3091),
                            Name = "Active",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3093),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3094),
                            Name = "Inactive",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3096),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3096),
                            Name = "Reported",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3098),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3098),
                            Name = "Blocked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3100),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3100),
                            Name = "Deleted",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3102),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3102),
                            Name = "Locked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3104),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3104),
                            Name = "Planning",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)8,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3106),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3106),
                            Name = "Active",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)9,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3108),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3108),
                            Name = "On Hold",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)10,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3110),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3111),
                            Name = "Completed",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)11,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3112),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3113),
                            Name = "Cancelled",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)12,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3114),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3115),
                            Name = "To Do",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)13,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3117),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3117),
                            Name = "In Progress",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)14,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3119),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3119),
                            Name = "Blocked",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)15,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3121),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3121),
                            Name = "Completed",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)16,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3123),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3123),
                            Name = "Deferred",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)17,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3125),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3125),
                            Name = "Idea",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)18,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3127),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3127),
                            Name = "Backlog",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)19,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3129),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3130),
                            Name = "In Progress",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)20,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3131),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3132),
                            Name = "Testing",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)21,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3133),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3134),
                            Name = "Released",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)22,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3135),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3136),
                            Name = "Reported",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)23,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3137),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3138),
                            Name = "In Progress",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)24,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3139),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3140),
                            Name = "Reproduced",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)25,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3141),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3142),
                            Name = "Fixed",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)26,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3144),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3144),
                            Name = "Verified",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)27,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3146),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3146),
                            Name = "Pending",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)28,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3148),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3148),
                            Name = "Reviewed",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)29,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3150),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3150),
                            Name = "In Progress",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)30,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3152),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3152),
                            Name = "Closed",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)31,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3154),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3154),
                            Name = "Active",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)32,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3156),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3156),
                            Name = "On Leave",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)33,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3158),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3159),
                            Name = "Pending",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)34,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3160),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3161),
                            Name = "Completed",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)35,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3162),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3163),
                            Name = "Resigned/Left",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)36,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3164),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3165),
                            Name = "Suspended",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)37,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3166),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(3167),
                            Name = "Not Assigned",
                            StatusGroupId = (byte)7
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.StatusGroup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusGroups");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(364),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(379),
                            Name = "User"
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(381),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(381),
                            Name = "Project"
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(383),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(384),
                            Name = "Task"
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(385),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(386),
                            Name = "Feature"
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(387),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(387),
                            Name = "Bug"
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(389),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(390),
                            Name = "Customer Story"
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(391),
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 623, DateTimeKind.Local).AddTicks(391),
                            Name = "TeamMember"
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockedOutEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("LoginProviderId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginProviderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = (byte)0,
                            Avatar = "",
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 625, DateTimeKind.Local).AddTicks(1817),
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            LoginProviderId = (byte)1,
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 625, DateTimeKind.Local).AddTicks(1822),
                            Password = "5652DDF6EA419A920A948A4BBA99A1B48B434D1237218FCF8D2DA2DA41E7C0F4046BC10C12ABDA86D09022B2AD1D6F566F82F3DF72CDFAEE40AB154537DFB8FD",
                            Salt = "+QA9bkBDYMlaPDTRzIYMoPeMDd9oa9k/Ay4Lg==",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.UserRole", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2973),
                            ModifiedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2974),
                            Name = "ProjectManager"
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2976),
                            ModifiedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2976),
                            Name = "ProjectMember"
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2979),
                            ModifiedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2979),
                            Name = "ProjectViewer"
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2981),
                            ModifiedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2981),
                            Name = "ProjectAdmin"
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2983),
                            ModifiedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2983),
                            Name = "TeamLeader"
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2984),
                            ModifiedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2985),
                            Name = "Developer"
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2986),
                            ModifiedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2987),
                            Name = "QAEngineer"
                        },
                        new
                        {
                            Id = (byte)8,
                            CreatedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2988),
                            ModifiedOn = new DateTime(2023, 11, 27, 4, 13, 37, 625, DateTimeKind.Utc).AddTicks(2989),
                            Name = "BusinessAnalyst"
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.CustomerStory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("CustomerStories");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActualStartDate = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6674),
                            Budget = 5000.0,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6687),
                            Description = "This is a demo project that all users are in this project",
                            EndDate = new DateTime(2024, 4, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6676),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6688),
                            Name = "Surface",
                            StartDate = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6669),
                            StatusId = (byte)8
                        },
                        new
                        {
                            Id = 2L,
                            ActualStartDate = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6691),
                            Budget = 10000.0,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6694),
                            Description = "A new development project",
                            EndDate = new DateTime(2024, 2, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6692),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6694),
                            Name = "Project A",
                            RepoLink = "https://github.com/projecta",
                            StartDate = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6691),
                            StatusId = (byte)8
                        },
                        new
                        {
                            Id = 3L,
                            ActualStartDate = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6697),
                            Budget = 7500.0,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6700),
                            Description = "Another project for testing",
                            EndDate = new DateTime(2024, 1, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6698),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6701),
                            Name = "Project B",
                            RepoLink = "https://github.com/projectb",
                            StartDate = new DateTime(2023, 11, 27, 9, 43, 37, 626, DateTimeKind.Local).AddTicks(6696),
                            StatusId = (byte)8
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 628, DateTimeKind.Local).AddTicks(8915),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 628, DateTimeKind.Local).AddTicks(8919),
                            Name = "Design",
                            ProjectId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 628, DateTimeKind.Local).AddTicks(8921),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 628, DateTimeKind.Local).AddTicks(8922),
                            Name = "Development",
                            ProjectId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 27, 9, 43, 37, 628, DateTimeKind.Local).AddTicks(8924),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 27, 9, 43, 37, 628, DateTimeKind.Local).AddTicks(8924),
                            Name = "Testing",
                            ProjectId = 1L
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("UserRoleId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.StatusGroup", "StatusGroup")
                        .WithMany("Statuses")
                        .HasForeignKey("StatusGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StatusGroup");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.LoginProvider", "LoginProvider")
                        .WithMany()
                        .HasForeignKey("LoginProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LoginProvider");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface_Entities.Entities.CustomerStory", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Project", "Project")
                        .WithMany("CustomerStories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Statuses")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Project", "Projects")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Surface_Entities.Entities.TeamMember", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Team", "Teams")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "Users")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.StatusGroup", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.Navigation("CustomerStories");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
