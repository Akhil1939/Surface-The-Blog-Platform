// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Surface_Entities.Context;

#nullable disable

namespace Surface_DataAccessLayer.Migrations
{
    [DbContext(typeof(SurfaceContext))]
    [Migration("20231124050812_table data init")]
    partial class tabledatainit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("LoginProviders");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 24, 5, 8, 12, 96, DateTimeKind.Utc).AddTicks(5143),
                            ModifiedOn = new DateTime(2023, 11, 24, 5, 8, 12, 96, DateTimeKind.Utc).AddTicks(5143),
                            Name = "Custom",
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 24, 5, 8, 12, 96, DateTimeKind.Utc).AddTicks(5145),
                            ModifiedOn = new DateTime(2023, 11, 24, 5, 8, 12, 96, DateTimeKind.Utc).AddTicks(5146),
                            Name = "Google",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusGroupId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StatusGroupId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3445),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3448),
                            Name = "Active",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3450),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3451),
                            Name = "Inactive",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3453),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3453),
                            Name = "Reported",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3455),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3455),
                            Name = "Blocked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3457),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3458),
                            Name = "Deleted",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3459),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3460),
                            Name = "Locked",
                            StatusGroupId = (byte)1
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3461),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3462),
                            Name = "Planning",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)8,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3464),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3464),
                            Name = "Active",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)9,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3466),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3466),
                            Name = "On Hold",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)10,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3467),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3468),
                            Name = "Completed",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)11,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3470),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3470),
                            Name = "Cancelled",
                            StatusGroupId = (byte)2
                        },
                        new
                        {
                            Id = (byte)12,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3472),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3472),
                            Name = "To Do",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)13,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3474),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3474),
                            Name = "In Progress",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)14,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3476),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3476),
                            Name = "Blocked",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)15,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3478),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3478),
                            Name = "Completed",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)16,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3480),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3480),
                            Name = "Deferred",
                            StatusGroupId = (byte)3
                        },
                        new
                        {
                            Id = (byte)17,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3482),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3483),
                            Name = "Idea",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)18,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3484),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3485),
                            Name = "Backlog",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)19,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3486),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3486),
                            Name = "In Progress",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)20,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3488),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3489),
                            Name = "Testing",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)21,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3490),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3491),
                            Name = "Released",
                            StatusGroupId = (byte)4
                        },
                        new
                        {
                            Id = (byte)22,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3492),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3493),
                            Name = "Reported",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)23,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3494),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3495),
                            Name = "In Progress",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)24,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3496),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3497),
                            Name = "Reproduced",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)25,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3498),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3499),
                            Name = "Fixed",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)26,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3500),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3501),
                            Name = "Verified",
                            StatusGroupId = (byte)5
                        },
                        new
                        {
                            Id = (byte)27,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3502),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3503),
                            Name = "Pending",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)28,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3505),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3505),
                            Name = "Reviewed",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)29,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3506),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3507),
                            Name = "In Progress",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)30,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3508),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3509),
                            Name = "Closed",
                            StatusGroupId = (byte)6
                        },
                        new
                        {
                            Id = (byte)31,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3511),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3511),
                            Name = "Active",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)32,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3513),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3513),
                            Name = "On Leave",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)33,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3515),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3515),
                            Name = "Pending",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)34,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3517),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3517),
                            Name = "Completed",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)35,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3519),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3519),
                            Name = "Resigned/Left",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)36,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3521),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3521),
                            Name = "Suspended",
                            StatusGroupId = (byte)7
                        },
                        new
                        {
                            Id = (byte)37,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3523),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(3523),
                            Name = "Not Assigned",
                            StatusGroupId = (byte)7
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.StatusGroup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusGroups");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1524),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1533),
                            Name = "User"
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1535),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1536),
                            Name = "Project"
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1537),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1538),
                            Name = "Task"
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1540),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1540),
                            Name = "Feature"
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1542),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1542),
                            Name = "Bug"
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1544),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1544),
                            Name = "Customer Story"
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1545),
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 96, DateTimeKind.Local).AddTicks(1546),
                            Name = "TeamMember"
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockedOutEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("LoginProviderId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginProviderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = (byte)0,
                            Avatar = "",
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 98, DateTimeKind.Local).AddTicks(441),
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            LoginProviderId = (byte)1,
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 98, DateTimeKind.Local).AddTicks(445),
                            Password = "5652DDF6EA419A920A948A4BBA99A1B48B434D1237218FCF8D2DA2DA41E7C0F4046BC10C12ABDA86D09022B2AD1D6F566F82F3DF72CDFAEE40AB154537DFB8FD",
                            Salt = "+QA9bkBDYMlaPDTRzIYMoPeMDd9oa9k/Ay4Lg==",
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("Surface.Entities.DataModels.UserRole", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreatedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5136),
                            ModifiedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5136),
                            Name = "ProjectManager"
                        },
                        new
                        {
                            Id = (byte)2,
                            CreatedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5138),
                            ModifiedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5139),
                            Name = "ProjectMember"
                        },
                        new
                        {
                            Id = (byte)3,
                            CreatedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5140),
                            ModifiedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5141),
                            Name = "ProjectViewer"
                        },
                        new
                        {
                            Id = (byte)4,
                            CreatedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5142),
                            ModifiedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5142),
                            Name = "ProjectAdmin"
                        },
                        new
                        {
                            Id = (byte)5,
                            CreatedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5144),
                            ModifiedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5144),
                            Name = "TeamLeader"
                        },
                        new
                        {
                            Id = (byte)6,
                            CreatedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5145),
                            ModifiedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5146),
                            Name = "Developer"
                        },
                        new
                        {
                            Id = (byte)7,
                            CreatedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5147),
                            ModifiedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5148),
                            Name = "QAEngineer"
                        },
                        new
                        {
                            Id = (byte)8,
                            CreatedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5149),
                            ModifiedOn = new DateTime(2023, 11, 24, 5, 8, 12, 98, DateTimeKind.Utc).AddTicks(5149),
                            Name = "BusinessAnalyst"
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.CustomerStory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("CustomerStories");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActualStartDate = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4918),
                            Budget = 5000.0,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4928),
                            Description = "This is a demo project that all users are in this project",
                            EndDate = new DateTime(2024, 4, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4921),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4929),
                            Name = "Surface",
                            StartDate = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4910),
                            StatusId = (byte)8
                        },
                        new
                        {
                            Id = 2L,
                            ActualStartDate = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4932),
                            Budget = 10000.0,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4934),
                            Description = "A new development project",
                            EndDate = new DateTime(2024, 2, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4933),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4935),
                            Name = "Project A",
                            RepoLink = "https://github.com/projecta",
                            StartDate = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4931),
                            StatusId = (byte)8
                        },
                        new
                        {
                            Id = 3L,
                            ActualStartDate = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4937),
                            Budget = 7500.0,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4939),
                            Description = "Another project for testing",
                            EndDate = new DateTime(2024, 1, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4938),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4939),
                            Name = "Project B",
                            RepoLink = "https://github.com/projectb",
                            StartDate = new DateTime(2023, 11, 24, 10, 38, 12, 99, DateTimeKind.Local).AddTicks(4937),
                            StatusId = (byte)8
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 101, DateTimeKind.Local).AddTicks(8284),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 101, DateTimeKind.Local).AddTicks(8289),
                            Name = "Design",
                            ProjectId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 101, DateTimeKind.Local).AddTicks(8291),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 101, DateTimeKind.Local).AddTicks(8292),
                            Name = "Development",
                            ProjectId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 11, 24, 10, 38, 12, 101, DateTimeKind.Local).AddTicks(8293),
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 11, 24, 10, 38, 12, 101, DateTimeKind.Local).AddTicks(8294),
                            Name = "Testing",
                            ProjectId = 1L
                        });
                });

            modelBuilder.Entity("Surface_Entities.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("UserRoleId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.LoginProvider", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.Status", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.StatusGroup", "StatusGroup")
                        .WithMany("Statuses")
                        .HasForeignKey("StatusGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StatusGroup");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.LoginProvider", "LoginProvider")
                        .WithMany()
                        .HasForeignKey("LoginProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LoginProvider");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface_Entities.Entities.CustomerStory", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Project", "Project")
                        .WithMany("CustomerStories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.Status", "Statuses")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Project", "Projects")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Surface_Entities.Entities.TeamMember", b =>
                {
                    b.HasOne("Surface.Entities.DataModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Surface_Entities.Entities.Team", "Teams")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Surface.Entities.DataModels.User", "Users")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.StatusGroup", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Surface.Entities.DataModels.User", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Project", b =>
                {
                    b.Navigation("CustomerStories");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Surface_Entities.Entities.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
